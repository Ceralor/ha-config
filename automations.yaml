- id: imhome
  alias: I'm Home
  trigger:
  - entity_id: person.kay_ohtie
    event: enter
    platform: zone
    zone: zone.home
  condition: []
  action:
  - service: script.home_mode
- id: imaway
  alias: I'm Away
  trigger:
  - entity_id: person.kay_ohtie
    event: leave
    platform: zone
    zone: zone.home
  condition: []
  action:
  - service: script.away_mode
- id: autowaff
  alias: Tell me to go to sleep
  description: ''
  trigger:
  - at: 00:00
    platform: time
  condition:
  - condition: or
    conditions:
    - condition: state
      entity_id: light.bedroom_lights
      state: 'on'
    - condition: state
      entity_id: light.living_room_lights
      state: 'on'
    - condition: state
      entity_id: light.office_lights
      state: 'on'
  - condition: time
    weekday:
    - mon
    - tue
    - wed
    - thu
    - fri
  action:
  - repeat:
      until:
      - condition: and
        conditions:
        - condition: state
          entity_id: light.bedroom_lights
          state: 'off'
        - condition: state
          entity_id: light.living_room_lights
          state: 'off'
        - condition: state
          entity_id: light.office_lights
          state: 'off'
      sequence:
      - service: script.metro_announce
        data:
          volume: 40
          message: Time to get to bed.
          entity_id: media_player.living_room_mini_speaker
      - delay: 00:15:00
  mode: single
- id: updatenotif
  alias: Version Update Notification
  description: ''
  trigger:
  - platform: template
    value_template: '{%- set oldver = state_attr("sensor.home_assistant_latest_version","name")
      -%} {%- if states("sensor.current_version") == oldver -%} false{% else %}true{%
      endif -%}'
  condition: []
  action:
  - data:
      message: '**Home Assistant version {{ state_attr("sensor.home_assistant_latest_version","tag_name")
        }} is now available!**

        Check out the [release notes](https://github.com/home-assistant/home-assistant/releases/tag/{{state_attr("sensor.home_assistant_latest_version","tag_name")}}).

        {{ state_attr("sensor.home_assistant_latest_version","body")|escape }}

        {% if states("sensor.update_minor_version") != states("sensor.current_minor_version")
        -%} There may be breaking changes, be sure to check the release notes! {%-
        else %}There are no breaking changes.{% endif %}'
      title: New Version Available
    service: persistent_notification.create
  - data:
      message: '*Home Assistant version {{ state_attr("sensor.home_assistant_latest_version","tag_name")
        }} is now available!*

        Check out the [release notes](https://github.com/home-assistant/home-assistant/releases/tag/{{
        state_attr("sensor.home_assistant_latest_version","tag_name") }}).


        {{ state_attr("sensor.home_assistant_latest_version","body")|replace("_","\\_")|regex_replace("\(\[.+\]\)","")|regex_replace("\n\[.+","")|regex_replace("\n
        ","\n") }}

        {% if states("sensor.update_minor_version") != states("sensor.current_minor_version")
        -%} There may be breaking changes, be sure to check the release notes! {%-
        else %}There are no breaking changes.{% endif %}'
    service: notify.telegram
- id: AutoColorTempChangeKitchen
  alias: Change lighting color temp if on for Kitchen
  trigger:
  - platform: state
    entity_id: input_boolean.sleeping
  condition:
  - condition: state
    entity_id: light.kitchen_lights
    state: 'on'
  action:
  - service: light.turn_on
    data:
      entity_id: light.kitchen_lights
      kelvin: '{{ 4000 if (trigger.to_state.state == "off") else 2000 }}'
      brightness_pct: '{{ 100 if (trigger.to_state.state == "off") else 10 }}'
- id: vacerror
  alias: Vacuum Error
  description: Alert me if the vacuum has a problem
  trigger:
  - platform: state
    entity_id: vacuum.robovac
    attribute: status
    to: error
  action:
  - service: telegram_bot.send_message
    data:
      title: Vacuum Error
      message: 'Robovac error: {{ state_attr("vacuum.robovac","error") }}'
      parse_mode: html
- id: vacstatnotif
  alias: Vacuum Status Notifier
  description: Send notification for various actions if I am away
  trigger:
  - platform: state
    entity_id: vacuum.robovac
    attribute: status
    from: cleaning
    to: returning
  - platform: state
    entity_id: vacuum.robovac
    attribute: status
    from: returning
    to: docked
  - platform: state
    entity_id: vacuum.robovac
    attribute: status
    from: docked
    to: cleaning
  condition:
  - '{{ not is_state("person.kay_ohtie","home") }}'
  action:
  - service: telegram_bot.send_message
    data:
      message: '{%- set status = trigger.to_state.state -%} Robovac is {%- if status
        == "returning" %} going home  {%- elif status == "docked" %} now home  {%-
        elif status == "cleaning" %} starting up {%- else %} in an unknown state,
        please check {%- endif -%}'
- id: armed_away_trigger
  alias: Armed-Away Trigger
  trigger:
  - platform: state
    entity_id: binary_sensor.kitchen_motion_sensor
    to: 'on'
  condition:
    condition: state
    entity_id: alarm_control_panel.ha_alarm
    state: armed_away
  action:
  - service: alarm_control_panel.alarm_trigger
    entity_id: alarm_control_panel.ha_alarm
- id: armed_home_trigger
  alias: Armed-Home Trigger
  trigger: []
  condition:
    condition: state
    entity_id: alarm_control_panel.ha_alarm
    state: armed_home
  action:
  - service: alarm_control_panel.alarm_trigger
    entity_id: alarm_control_panel.ha_alarm
- id: armed_night_trigger
  alias: Armed-Night Trigger
  trigger: []
  condition:
    condition: state
    entity_id: alarm_control_panel.ha_alarm
    state: armed_night
  action:
  - service: alarm_control_panel.alarm_trigger
    entity_id: alarm_control_panel.ha_alarm
- id: alarm_trigger
  alias: Alarm Trigger
  trigger:
  - platform: state
    entity_id: alarm_control_panel.ha_alarm
    to: triggered
  action:
  - service: notify.voipms_sms
    data:
      target: '3344440042'
      message: Alarm has been triggered at home
- id: dehum_notice
  alias: Dehumidifier Notice
  description: Alerts that the dehumidifier has turned off on its own
  trigger:
  - platform: numeric_state
    entity_id: switch.dehumidifier
    attribute: current_a
    below: 0.1
  condition:
  - condition: state
    entity_id: switch.dehumidifier
    state: 'on'
    for:
      minutes: 3
  action:
  - service: notify.notify
    data:
      title: Dehumidifier
      message: Dehumidifier stopped. Resevoir may be full.
- id: '1602099312252'
  alias: Safety Off Wax Melter
  description: Turns off the wax melter after 15 minutes of on-time.
  trigger:
  - platform: device
    type: turned_on
    device_id: 065e696e10624142afd6549b5a775050
    entity_id: switch.wax_melter
    domain: switch
    for:
      hours: 0
      minutes: 15
      seconds: 0
  condition: []
  action:
  - type: turn_off
    device_id: 065e696e10624142afd6549b5a775050
    entity_id: switch.wax_melter
    domain: switch
  mode: single
- id: fitbitsleep
  alias: Fitbit Sleep Notification
  description: Sends a notification via Telegram on wake-up
  trigger:
  - platform: numeric_state
    entity_id: sensor.sleep_time_in_bed
    above: '1'
  action:
  - service: notify.telegram
    data:
      message: Good morning! You were in bed for a total of {{ timedelta(minutes=(states("sensor.sleep_time_in_bed")|int))
        }}. Of that, you were asleep for {{ timedelta(minutes=(states("sensor.sleep_minutes_asleep")|int))
        }}, and woke up {{ states("sensor.awakenings_count") }} times totalling {{
        states("sensor.sleep_minutes_awake") }}m, for a sleep efficiency of {{ states("sensor.sleep_efficiency")
        }}%. You fell asleep at {{ states("sensor.sleep_start_time") }} and officially
        woke at {% set waketime = strptime((states("sensor.sleep_start_time")|string),"%I:%M
        %p")+timedelta(minutes=(states("sensor.sleep_time_in_bed")|int)) -%} {{ waketime.strftime("%I:%M
        %p") }}.
  mode: single
- id: kicklights
  alias: Kick Lights
  description: Kicks the deck lights if either's unavailable
  trigger:
  - platform: template
    value_template: '{{ states.light.deck_bulb.state == "unavailable" }}'
    for: 00:01:00
  - platform: template
    value_template: '{{ states.light.deck_strip.state == "unavailable" }}'
    for: 00:01:00
  condition: []
  action:
  - repeat:
      until:
      - condition: template
        value_template: '{{ states[trigger.entity_id].state == "unavailable" }}'
      sequence:
      - service: rest_command.kick_tasmota
        data:
          tasmota_ip: '{{ states("input_text.deck_"+trigger.entity_id.split("_")[-1]+"_ip_address")
            }}'
      - delay: 00:01:00
  mode: parallel
  max: 2
- id: '1604177077297'
  alias: Switch TV to Chromecast
  description: Switches input to Chromecast even when CEC doesn't fire
  trigger:
  - platform: state
    entity_id: media_player.living_room_tv
    to: playing
  condition:
  - condition: state
    entity_id: media_player.yap_view
    state: standby
  action:
  - service: media_player.select_source
    data:
      source: tvinput.hdmi3
    entity_id: media_player.yap_view
  mode: single
- id: autotvswitches
  alias: Auto TV Speakers & Bias
  trigger:
  - platform: state
    entity_id: switch.yap_view
  action:
  - service: switch.turn_{{ trigger.to_state.state }}
    data:
      entity_id: switch.tv_speakers
  - service: light.turn_{{ trigger.to_state.state }}
    data:
      entity_id: light.tv_bias_strip
- id: '1607283203728'
  alias: Robovac run @ 100% battery
  description: ''
  trigger:
  - platform: state
    entity_id: vacuum.robovac
    attribute: battery_level
    to: '100'
    for: 00:00:01
  condition: []
  action:
  - service: vacuum.start
    data: {}
    entity_id: vacuum.robovac
  - service: automation.turn_off
    data: {}
    entity_id: automation.robovac_run_twice
  mode: single
- id: thermostat_schedule_toggle
  alias: Thermostat Schedule Toggle
  description: Switches schedules based on heating/cooling state
  trigger:
  - platform: state
    entity_id: climate.thermostat
  - platform: homeassistant
    event: start
  condition:
  - condition: template
    value_template: '{%- if trigger.platform == "homeassistant" -%} true {%- else
      -%} {{ trigger.to_state.state != trigger.from_state.state }} {%- endif -%}'
  action:
  - choose:
    - conditions: '{{ is_state("climate.thermostat","heat") }}'
      sequence:
      - service: switch.turn_off
        entity_id: switch.schedule_cooling
      - service: switch.turn_on
        entity_id:
        - switch.schedule_heat_weekdays
        - switch.schedule_heat_weekend
    - conditions: '{{ is_state("climate.thermostat","cool") }}'
      sequence:
      - service: switch.turn_off
        entity_id:
        - switch.schedule_heat_weekdays
        - switch.schedule_heat_weekend
      - service: switch.turn_on
        entity_id: switch.schedule_cooling
    default:
    - service: switch.turn_off
      entity_id:
      - switch.schedule_cooling
      - switch.schedule_heat_weekend
      - switch.schedule_heat_weekdays
    - choose:
      - conditions: '{{ not is_state("climate.thermostat","off") }}'
        sequence:
        - service: notify.notify
          data:
            title: Unsupported Thermostat Schedule State
            message: Switching off all thermostat schedules
- id: ifttt_reminder
  alias: IFTTT Reminders
  description: Reminders created using an IFTTT trigger
  trigger:
  - platform: webhook
    webhook_id: iftttreminder
  action:
  - service: script.verbal_reminder
    data:
      delay_minutes: '{{ trigger.json.time }}'
      message: '{{ trigger.json.message }}'
      media_entity_id: media_player.cast_speakers
  mode: single
- id: '1609913501249'
  alias: Hue Sync Management
  description: ''
  trigger:
  - platform: state
    entity_id: binary_sensor.hue_sync
  condition:
  - condition: template
    value_template: '{{ trigger.from_state.state != trigger.to_state.state }}'
  action:
  - service: switch.turn_{{ trigger.from_state.state | default('on') }}
    data:
      entity_id: switch.circadian_lighting_circadian_lighting
  mode: single
- id: '1614553579792'
  alias: Toggle Deck Light
  description: ''
  trigger:
  - device_id: caac8b79c43ea4a1144ae46f44d73e2a
    domain: hue
    platform: device
    type: remote_button_short_press
    subtype: button_1
  condition: []
  action:
  - service: light.toggle
    data: {}
    target:
      device_id: 6b45d26b86a6b8dcd096781b4ca109ea
  mode: single
- id: '1614555193432'
  alias: 'Deck: toggle off kitcheb'
  description: ''
  trigger:
  - device_id: caac8b79c43ea4a1144ae46f44d73e2a
    domain: hue
    platform: device
    type: remote_button_short_press
    subtype: button_4
  condition: []
  action:
  - service: light.toggle
    data: {}
    entity_id: light.kitchen_lights
  mode: single
- id: '1614811735938'
  alias: Kitchen Motion Lights
  description: ''
  use_blueprint:
    path: homeassistant/motion_light.yaml
    input:
      motion_entity: binary_sensor.kitchen_motion_sensor
      light_target:
        entity_id: light.kitchen_lights
      no_motion_wait: 300
- id: '1614925333833'
  alias: Closet Hallway Light
  description: ''
  use_blueprint:
    path: bergstrom/door-sensor-turn-on-off-light.yaml
    input:
      doorsensor_entity: binary_sensor.wyzesense_779c3062
      light_target:
        device_id: 9300899472264249a635bcf495d93732
      door_closed_wait: 0
- id: '1615572715254'
  alias: Mailbox Notifications
  description: Notifies of mail
  trigger:
  - platform: state
    entity_id: binary_sensor.wyzesense_779c3068
    to: 'on'
  condition: []
  action:
  - service: notify.notify
    data:
      title: Mail's here!
      message: Your mailbox has been opened.
  mode: single
- id: '1615945823861'
  alias: Tornado = Lights!
  description: wake me the goddamn fuck up for a torando
  trigger:
  - platform: event
    event_type: nwr_same
    event_data:
      type: TOR
  condition: []
  action:
  - service: input_boolean.turn_off
    target:
      entity_id: input_boolean.sleeping
  - service: switch.turn_off
    target:
      entity_id:
      - switch.circadian_lighting_circadian_lighting
      - switch.circadian_lighting_kitchen_sleeping
  - service: light.turn_on
    data:
      brightness_pct: 100
      kelvin: 4000
    target:
      device_id:
      - b70e0f0d242040ce89c08669f5ddb735
      - 1811240ff32244f68b209afb674f5e1a
      - 9300899472264249a635bcf495d93732
      - 71c85dbb63bd4adda16c29fca45c6954
      - 9e040c868af94410896202aa7927a9e3
      entity_id: light.kitchen_lights
  - service: pyscript.illuminate_walf
    data:
      device_names:
      - Bedroom Lamp
      - Living Room Lamp
      - Living Room Lamp 2
      - Kitchen Light
  mode: single
- id: '1615949430225'
  alias: NWS Test
  description: ''
  trigger:
  - platform: event
    event_type: nwr_same
    event_data: {}
  condition: []
  action:
  - service: notify.telegram
    data:
      message: 'EAS: {{ trigger.event.data.type }} message: {{ trigger.event.data.message
        }}'
  mode: single
- id: '1616350998965'
  alias: Grow Lights Schedule
  description: ''
  use_blueprint:
    path: EPMatt/on_off_schedule_state_persistence.yaml
    input:
      off_time: '2:00:00'
      automation_target:
        device_id: 8d4f25d5a3871d4c882c2bb2e2211a5e
      on_time: '17:00:00'
      trigger_at_homeassistant_startup: true
- id: '1617316064122'
  alias: Bedroom Alarm Lights
  description: ''
  trigger:
  - platform: template
    value_template: '{% set alarming = false %}

      {% for alarm in state_attr("sensor.bedroom_clock_alarms","alarms") %}

      {% if (alarm[''fire_time''] - 10 <= (as_timestamp(now())|int)) and  (alarm[''fire_time'']+10
      >= (as_timestamp(now())|int))  %}

      {% set alarming = true %}

      {% endif %}

      {% endfor %}

      {{ alarming }}'
  condition: []
  action:
  - type: turn_on
    device_id: 1811240ff32244f68b209afb674f5e1a
    entity_id: light.bedroom_table_lamp
    domain: light
    brightness_pct: 100
  mode: single
